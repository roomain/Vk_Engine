#pragma once
/***********************************************
* @headerfile VkImageInterface.h
* @date 26 / 05 / 2024
* @author Roomain
************************************************/
#include <vulkan/vulkan.hpp>
#include "vk_engine_globals.h"

/*@brief base image generated by vulkan (eg swapchain)*/
class ENGINE_EXPORT VkImageInterface
{
protected:
	VkImage m_image = VK_NULL_HANDLE;					/*!< image data*/
	VkImageView m_imageView = VK_NULL_HANDLE;			/*!< image view*/

public:
	[[nodiscard]] constexpr bool isValid()const noexcept { return m_image != VK_NULL_HANDLE; }
	[[nodiscard]] constexpr VkImage image() const noexcept { return m_image; }
	[[nodiscard]] constexpr VkImageView imageView() const noexcept { return m_imageView; }
	[[nodiscard]] virtual constexpr uint32_t width() const noexcept = 0;
	[[nodiscard]] virtual constexpr uint32_t height() const noexcept = 0;
	[[nodiscard]] virtual constexpr uint32_t depth() const noexcept = 0;
	[[nodiscard]] virtual constexpr VkFormat format() const noexcept = 0;
};